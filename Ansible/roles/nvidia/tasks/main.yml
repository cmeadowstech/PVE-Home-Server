---
- name: Create blacklist config for Nouveau
  when: nvidia_driver == 'server'
  ansible.builtin.copy:
    dest: /etc/modprobe.d/blacklist-nouveau.conf
    content: |
      blacklist nouveau
      options nouveau modeset=0
    mode: '0644'
  register: blacklist_conf
  notify:
    - Update initramfs
    - Reboot system

- name: Check if NVIDIA driver is installed
  ansible.builtin.command: nvidia-smi
  register: nvidia_check
  ignore_errors: true
  check_mode: false
  changed_when: false

# https://sluijsjes.nl/2024/05/18/coral-and-nvidia-passthrough-for-proxmox-lxc-to-install-frigate-video-surveillance-server/
- name: Download and install NVIDIA driver
  when: nvidia_check.rc != 0 or nvidia_update | default(false)
  block:
    - name: Download NVIDIA driver
      ansible.builtin.get_url:
        url: "https://download.nvidia.com/XFree86/Linux-x86_64/{{ nvidia_version }}/{{ nvidia_installer }}"
        dest: "/tmp/{{ nvidia_installer }}"
        mode: '0755'

    - name: Install NVIDIA driver
      ansible.builtin.command:
        cmd: "/tmp/{{ nvidia_installer }} --silent --no-questions --disable-nouveau {{ '--disable-nouveau' if nvidia_driver == 'server' else '' }}"
      register: nvidia_install
      failed_when:
        - nvidia_install.rc != 0
        - "'ERROR: The Nouveau kernel driver is currently in use by your system' not in nvidia_install.stderr"

    - name: Clean up installer
      ansible.builtin.file:
        path: "/tmp/{{ nvidia_installer }}"
        state: absent

- name: Configure NVIDIA drivers and udev rules
  when: nvidia_driver == 'server'
  block:
    - name: Configure modules loading
      ansible.builtin.copy:
        dest: /etc/modules-load.d/modules.conf
        content: |
          # load nvidia modules
          nvidia
          nvidia_uvm
          nvidia-drm
          nvidia-uvm
        mode: '0644'
      register: modules_conf
      notify:
        - Update initramfs

    - name: Create NVIDIA udev rules
      ansible.builtin.copy:
        dest: /etc/udev/rules.d/70-nvidia.rules
        content: |
          KERNEL=="nvidia", RUN+="/bin/bash -c '/usr/bin/nvidia-smi -L && /bin/chmod 666 /dev/nvidia*'"
          KERNEL=="nvidia_uvm", RUN+="/bin/bash -c '/usr/bin/nvidia-modprobe -c0 -u && /bin/chmod 0666 /dev/nvidia-uvm*'"
          SUBSYSTEM=="module", ACTION=="add", DEVPATH=="/module/nvidia", RUN+="/usr/bin/nvidia-modprobe -m"
        mode: '0644'

- name: Gather service facts
  when:
    - nvidia_driver == 'server'
  ansible.builtin.service_facts:

- name: Setup NVIDIA persistence service
  when:
    - nvidia_driver == 'server'
    - not ansible_facts.services['nvidia-persistenced.service'] is defined
  block:
    - name: Copy persistence service init file
      ansible.builtin.copy:
        src: /usr/share/doc/NVIDIA_GLX-1.0/samples/nvidia-persistenced-init.tar.bz2
        dest: /tmp/nvidia-persistenced-init.tar.bz2
        remote_src: true

    - name: Extract persistence service files
      ansible.builtin.unarchive:
        src: /tmp/nvidia-persistenced-init.tar.bz2
        dest: /tmp
        remote_src: true

    - name: Remove old service file if exists
      ansible.builtin.file:
        path: /etc/systemd/system/nvidia-persistenced.service
        state: absent

    - name: Install persistence service
      ansible.builtin.command:
        cmd: /tmp/nvidia-persistenced-init/install.sh
        creates: /etc/systemd/system/nvidia-persistenced.service

    - name: Enable and start persistence service
      ansible.builtin.systemd:
        name: nvidia-persistenced
        state: started
        enabled: true
        daemon_reload: true

    - name: Clean up temporary files
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - /tmp/nvidia-persistenced-init.tar.bz2
        - /tmp/nvidia-persistenced-init
  notify:
    - Reboot system

- name: Verify NVIDIA driver installation
  ansible.builtin.command:
    cmd: nvidia-smi
  register: nvidia_check
  failed_when: nvidia_check.rc != 0
  changed_when: false
