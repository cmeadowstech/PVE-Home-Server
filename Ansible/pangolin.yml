---
- name: Set up Pangolin
  hosts: vps
  roles:
    - update
    - docker_compose
  vars:
    app: pangolin
  tasks:
    - name: Add iptables logging rule
      iptables:
        chain: INPUT
        jump: LOG
        log_prefix: "iptables: "
        state: present
        comment: "Log all INPUT chain traffic"

    - name: Deploy Pangolin
      block:
        - name: Set lapi key
          set_fact:
            lapi_key: "{{ lookup('password', '/dev/null chars=ascii_lowercase,digits length=32') }}"

        - name: Create app folders
          ansible.builtin.file:
            path: "{{ item }}"
            state: directory
          with_items:
            - "/src/{{ app }}/config/crowdsec/acquis.d"
            - "/src/{{ app }}/config/traefik"

        - name: Copy config files
          ansible.builtin.template:
            src: "{{ item.src }}"
            dest: "{{ item.dest }}"
          notify: Restart {{ app }}
          with_items:
            - src: "{{ app }}_config.yml.j2"
              dest: "/src/{{ app }}/config/config.yml"
            - src: "traefik_config.yml.j2"
              dest: "/src/{{ app }}/config/traefik/traefik_config.yml"
            - src: "dynamic_config.yml.j2"
              dest: "/src/{{ app }}/config/traefik/dynamic_config.yml"
            - src: "journalctl.yaml.j2"
              dest: "/src/{{ app }}/config/crowdsec/acquis.d/journalctl.yaml"

        - name: Create config folders
          ansible.builtin.file:
            path: "/mnt/config/{{ item }}"
            state: directory
          with_items:
            - calibre-web-automated
            - audiobookshelf

        - name: Copy docker files
          ansible.builtin.template:
            src: "{{ app }}_docker-compose.yml.j2"
            dest: "/src/{{ app }}/docker-compose.yml"

        - name: Create and start {{ app }}
          community.docker.docker_compose_v2:
            project_src: /src/{{ app }}

  handlers:
    - name: Restart {{ app }}
      community.docker.docker_compose_v2:
        project_src: /src/{{ app }}
        state: restarted

    # - name: Add {{ app }} to technitium
    #   ansible.builtin.script: technitium_script.sh -h {{ app }} -d firewall.home
    #   environment:
    #     TECHNITIUM_API_TOKEN: "{{ TECHNITIUM_API_TOKEN }}"
    #   delegate_to: localhost