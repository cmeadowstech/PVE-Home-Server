---
- name: Preconfigure Jellyfin server
  hosts: video.home
  vars:
    user: jellyfin
  roles:
    - update
    - dotnet

- name: Update LXC .conf
  ansible.builtin.import_playbook: lxc_conf.yml
  vars:
    id: "{{ hostvars['video.home']['container_id_fact'] }}"
    lxc_config_block: |
      lxc.cgroup2.devices.allow: a
      lxc.cap.drop:
      lxc.mount.entry: /dev/net dev/net none bind,create=dir
      lxc.mount.entry: /dev/nvidia0 dev/nvidia0 none bind,optional,create=file
      lxc.mount.entry: /dev/nvidiactl dev/nvidiactl none bind,optional,create=file
      lxc.mount.entry: /dev/nvidia-modeset dev/nvidia-modeset none bind,optional,create=file
      lxc.mount.entry: /dev/nvidia-uvm dev/nvidia-uvm none bind,optional,create=file
      lxc.mount.entry: /dev/nvidia-uvm-tools dev/nvidia-uvm-tools none bind,optional,create=file
      dev0: /dev/dri/renderD128,gid=104   
      mp0: /storage/streaming,mp=/mnt/media

- name: Setup Jellyfin server
  hosts: video.home
  vars:
    user: jellyfin
  tasks:
    - name: Install dependencies
      ansible.builtin.apt:
        update_cache: true
        pkg:
          - intel-opencl-icd
        
    - name: Check if NVIDIA driver is installed
      ansible.builtin.command: nvidia-smi
      register: nvidia_check
      ignore_errors: true
      check_mode: false
      changed_when: false

    # https://sluijsjes.nl/2024/05/18/coral-and-nvidia-passthrough-for-proxmox-lxc-to-install-frigate-video-surveillance-server/
    - name: Download and install NVIDIA driver
      when: nvidia_check.rc != 0
      block:
        - name: Download NVIDIA driver
          ansible.builtin.get_url:
            url: "https://download.nvidia.com/XFree86/Linux-x86_64/{{ nvidia_version }}/{{ nvidia_installer }}"
            dest: "/tmp/{{ nvidia_installer }}"
            mode: '0755'

        - name: Install NVIDIA driver
          ansible.builtin.command:
            cmd: "/tmp/{{ nvidia_installer }} --silent --no-kernel-module"
          register: nvidia_install
          failed_when: 
            - nvidia_install.rc != 0 
            - "'ERROR: The Nouveau kernel driver is currently in use by your system' not in nvidia_install.stderr"

        - name: Clean up installer
          ansible.builtin.file:
            path: "/tmp/{{ nvidia_installer }}"
            state: absent

        - name: Reboot system
          ansible.builtin.reboot:

    - name: Check if Jellyfin is installed
      ansible.builtin.package_facts:
        manager: apt
      no_log: true

    - name: Install Jellyfin
      when: "'jellyfin' not in ansible_facts.packages"
      block:
        - name: Install software-properties-common
          ansible.builtin.apt:
            pkg:
              - software-properties-common

        # - name: Add Universe repository
        #   apt_repository:
        #     repo: universe
        #     state: present

        - name: Create keyrings directory
          ansible.builtin.file:
            path: /etc/apt/keyrings
            state: directory
            mode: '0755'

        - name: Download and install Jellyfin GPG key
          get_url:
            url: https://repo.jellyfin.org/jellyfin_team.gpg.key
            dest: /tmp/jellyfin.gpg.key
          register: gpg_key

        - name: Import GPG key
          shell: cat /tmp/jellyfin.gpg.key | gpg --dearmor -o /etc/apt/keyrings/jellyfin.gpg
          when: gpg_key.changed

        - name: Create Jellyfin repository source
          copy:
            dest: /etc/apt/sources.list.d/jellyfin.sources
            mode: '0644'
            content: |
              Types: deb
              URIs: https://repo.jellyfin.org/{{ ansible_distribution | lower }}
              Suites: {{ ansible_distribution_release }}
              Components: main
              Architectures: {{ 'amd64' if ansible_architecture == 'x86_64' else ansible_architecture }}
              Signed-By: /etc/apt/keyrings/jellyfin.gpg

        - name: Update apt cache
          apt:
            update_cache: yes

        - name: Install Jellyfin
          apt:
            pkg: 
            - jellyfin
            state: present

        - name: Ensure Jellyfin service is enabled and started
          systemd:
            name: jellyfin
            state: started
            enabled: yes

        - name: Clean up temporary files
          file:
            path: /tmp/jellyfin.gpg.key
            state: absent

    - name: Add jellyfin user to render group
      ansible.builtin.user:
        name: jellyfin
        groups: render
        append: yes

    # Fileflows
    - name: Create fileflows user
      ansible.builtin.user:
        name: fileflows
        system: true
        create_home: false
        shell: /usr/sbin/nologin

    - name: Check if FileFlows service exists
      ansible.builtin.stat:
        path: /etc/systemd/system/fileflows.service
      register: service_check

    - name: Setup FileFlows
      block:
        - name: Install FileFlows
          when: not service_check.stat.exists
          block:
            - name: Download FileFlows
              ansible.builtin.get_url:
                url: https://fileflows.com/downloads/zip
                dest: /tmp/FileFlows.zip
                mode: '0644'

            - name: Create FileFlows directory
              ansible.builtin.file:
                path: /usr/src/FileFlows
                state: directory
                mode: '0755'
                owner: fileflows
                group: fileflows

            - name: Extract FileFlows
              ansible.builtin.unarchive:
                src: /tmp/FileFlows.zip
                dest: /usr/src/FileFlows
                remote_src: true
                owner: fileflows
                group: fileflows

            - name: Set execute permission on run-server.sh
              ansible.builtin.file:
                path: /usr/src/FileFlows/run-server.sh
                mode: '0755'
                owner: fileflows
                group: fileflows

            - name: Create FileFlows systemd service
              ansible.builtin.copy:
                dest: /etc/systemd/system/fileflows.service
                mode: '0644'
                content: |
                  [Unit]
                  Description=FileFlows

                  [Service]
                  ExecStart=/usr/bin/dotnet /usr/src/FileFlows/Server/FileFlows.Server.dll
                  SyslogIdentifier=FileFlows
                  User=fileflows
                  Restart=always
                  RestartSec=5
                  Environment=DOTNET_ROOT=/usr/lib64/dotnet

                  [Install]
                  WantedBy=multi-user.target

            - name: Start and enable FileFlows service
              ansible.builtin.systemd:
                name: fileflows
                state: started
                enabled: true
                daemon_reload: true

            - name: Clean up zip file
              ansible.builtin.file:
                path: /tmp/FileFlows.zip
                state: absent
