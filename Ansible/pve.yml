---
- name: Configure PVE Server
  hosts: pve_server
  roles:
    - update
  tasks:
    - name: Configure Proxmox repositories
      block:
        - name: Remove enterprise repository
          ansible.builtin.apt_repository:
            repo: "deb https://enterprise.proxmox.com/debian/pve bookworm pve-enterprise"
            state: absent
            filename: pve-enterprise

        - name: Add community repository
          ansible.builtin.apt_repository:
            repo: "deb http://download.proxmox.com/debian/pve bookworm pve-no-subscription"
            state: present
            filename: pve-community

        - name: Update apt cache
          ansible.builtin.apt:
            update_cache: yes

    # https://mclarendatasystems.com/remove-proxmox51-subscription-notice/
    - name: Remove Proxmox subscription notice
      block:
        - name: Check if subscription notice has already been removed
          ansible.builtin.shell: |
            grep -A2 "checked_command: function(orig_cmd)" /usr/share/javascript/proxmox-widget-toolkit/proxmoxlib.js | grep -q "return;"
          register: check_notice
          changed_when: false
          failed_when: false

        - name: Modify proxmoxlib.js to remove subscription notice
          ansible.builtin.replace:
            path: /usr/share/javascript/proxmox-widget-toolkit/proxmoxlib.js
            regexp: 'checked_command: function\(orig_cmd\) \{'
            replace: 'checked_command: function(orig_cmd) {\n   orig_cmd();\n   return;'
          when: check_notice.rc != 0

        - name: Restart pveproxy service
          ansible.builtin.systemd:
            name: pveproxy
            state: restarted
          when: check_notice.rc != 0

    - name: Enable and start fstrim timer
      ansible.builtin.systemd:
        name: fstrim.timer
        state: started
        enabled: yes

    - name: Prepare NVidia drivers
      block:
        - name: Check kernel version
          ansible.builtin.shell: |
            uname -r
          register: kernel_version
          changed_when: false
          failed_when: false

        - name: Install pve-headers
          ansible.builtin.apt:
            update_cache: true
            pkg:
              - "pve-headers-{{kernel_version.stdout}}"
              - make
              - gcc
              - libvulkan1
              - pkg-config

        - name: Create blacklist config for Nouveau
          ansible.builtin.copy:
            dest: /etc/modprobe.d/blacklist-nouveau.conf
            content: |
              blacklist nouveau
              options nouveau modeset=0
            mode: '0644'
          register: blacklist_conf

        - name: Update initramfs
          ansible.builtin.command: update-initramfs -u
          when: blacklist_conf.changed

        - name: Reboot system
          ansible.builtin.reboot:
          when: blacklist_conf.changed

        - name: Check if NVIDIA driver is installed
          ansible.builtin.command: nvidia-smi
          register: nvidia_check
          ignore_errors: true
          check_mode: false
          changed_when: false

        # https://sluijsjes.nl/2024/05/18/coral-and-nvidia-passthrough-for-proxmox-lxc-to-install-frigate-video-surveillance-server/
        - name: Download and install NVIDIA driver
          when: nvidia_check.rc != 0
          block:
            - name: Download NVIDIA driver
              ansible.builtin.get_url:
                url: "https://download.nvidia.com/XFree86/Linux-x86_64/{{ nvidia_version }}/{{ nvidia_installer }}"
                dest: "/tmp/{{ nvidia_installer }}"
                mode: '0755'

            - name: Install NVIDIA driver
              ansible.builtin.command:
                cmd: "/tmp/{{ nvidia_installer }} --silent --no-questions --disable-nouveau"
              register: nvidia_install
              failed_when: 
                - nvidia_install.rc != 0 
                - "'ERROR: The Nouveau kernel driver is currently in use by your system' not in nvidia_install.stderr"

            - name: Clean up installer
              ansible.builtin.file:
                path: "/tmp/{{ nvidia_installer }}"
                state: absent

        - name: Configure NVIDIA drivers and udev rules
          block:
            - name: Configure modules loading
              ansible.builtin.copy:
                dest: /etc/modules-load.d/modules.conf
                content: |
                  # load nvidia modules
                  nvidia
                  nvidia_uvm
                  nvidia-drm
                  nvidia-uvm
                mode: '0644'
              register: modules_conf

            - name: Update initramfs for all kernels
              ansible.builtin.command:
                cmd: update-initramfs -u -k all
              when: modules_conf.changed

            - name: Create NVIDIA udev rules
              ansible.builtin.copy:
                dest: /etc/udev/rules.d/70-nvidia.rules
                content: |
                  KERNEL=="nvidia", RUN+="/bin/bash -c '/usr/bin/nvidia-smi -L && /bin/chmod 666 /dev/nvidia*'"
                  KERNEL=="nvidia_uvm", RUN+="/bin/bash -c '/usr/bin/nvidia-modprobe -c0 -u && /bin/chmod 0666 /dev/nvidia-uvm*'"
                  SUBSYSTEM=="module", ACTION=="add", DEVPATH=="/module/nvidia", RUN+="/usr/bin/nvidia-modprobe -m"
                mode: '0644'

            - name: Setup NVIDIA persistence service
              block:
                - name: Copy persistence service init file
                  ansible.builtin.copy:
                    src: /usr/share/doc/NVIDIA_GLX-1.0/samples/nvidia-persistenced-init.tar.bz2
                    dest: /tmp/nvidia-persistenced-init.tar.bz2
                    remote_src: yes

                - name: Extract persistence service files
                  ansible.builtin.unarchive:
                    src: /tmp/nvidia-persistenced-init.tar.bz2
                    dest: /tmp
                    remote_src: yes

                - name: Remove old service file if exists
                  ansible.builtin.file:
                    path: /etc/systemd/system/nvidia-persistenced.service
                    state: absent

                - name: Install persistence service
                  ansible.builtin.command:
                    cmd: /tmp/nvidia-persistenced-init/install.sh
                    creates: /etc/systemd/system/nvidia-persistenced.service

                - name: Enable and start persistence service
                  ansible.builtin.systemd:
                    name: nvidia-persistenced
                    state: started
                    enabled: yes
                    daemon_reload: yes

                - name: Clean up temporary files
                  ansible.builtin.file:
                    path: "{{ item }}"
                    state: absent
                  loop:
                    - /tmp/nvidia-persistenced-init.tar.bz2
                    - /tmp/nvidia-persistenced-init

            - name: Reboot system
              ansible.builtin.reboot:

            - name: Verify NVIDIA driver installation
              ansible.builtin.command:
                cmd: nvidia-smi
              register: nvidia_check
              failed_when: nvidia_check.rc != 0
              changed_when: false

    - name: Update GRUB defaults
      ansible.builtin.lineinfile:
        path: /etc/default/grub
        regexp: '^GRUB_CMDLINE_LINUX_DEFAULT='
        line: 'GRUB_CMDLINE_LINUX_DEFAULT="quiet consoleblank=0 console=tty0 nvidia-drm.modeset=1"'
        backup: true
      notify:
        - Update grub
        - Reboot system

  handlers:
    - name: Update grub
      ansible.builtin.command: update-grub

    - name: Update initramfs
      ansible.builtin.command: update-initramfs -u

    - name: Reboot system
      ansible.builtin.reboot:
